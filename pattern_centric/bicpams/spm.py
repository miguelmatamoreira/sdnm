import unittest, collections, copy
import pandas as pd

class SPM:

    def __init__(self, min_support, min_cols):
        self.min_rows = min_support
        self.min_cols = min_cols
        self.patterns = {}
        print('PrefixSpan with sup=%d' % self.min_rows)

    def run(self, data, ncols):
        self.ncols = ncols
        ids = [*range(0, len(data))]
        self.prefix_span(ids, data, [])
        return self.patterns

    def prefix_span(self, ids, sdb, pattern):
        # print("Pattern",pattern)
        maxsup = 0
        co_freqs, seq_freqs = self.frequent_items(sdb, pattern)
        for co, freqs in [(True, co_freqs), (False, seq_freqs)]:
            for item, isup in freqs.items():

                # A: expand
                p = copy.deepcopy(pattern)
                if co:
                    p[-1].append(item)
                else:
                    p.append([item])
                # print("Subpattern",p)
                # if item in inner and isup == inner[item]: continue
                p_ids, p_sdb = self.generate_SDB(ids, sdb, p)
                # print("SDB",p_sdb)
                p_maxsup = self.prefix_span(p_ids, p_sdb, p)  # superItemSup

                # B: check closure
                maxsup = max(maxsup, isup)
                if isup > p_maxsup:
                    cols = self._set(p)
                    len_p = len(cols)
                    if len_p >= self.min_cols:
                        if isup in self.patterns:
                            ipatterns = self.patterns[isup]
                            closed, removal = True, -1
                            for i, (__, j_cols, j_ids) in enumerate(ipatterns):
                                if len_p < len(j_cols) and ids[0] == j_ids[0] and cols.issubset(j_cols):
                                    closed = False
                                    break
                            if closed: ipatterns.append((p, cols, ids))
                        else:
                            self.patterns[isup] = [(p, cols, ids)]
        return maxsup

    def generate_SDB(self, ids, sdb, pattern):
        if pattern == None: return ids, sdb
        res_ids, res_sdb = [], []
        last_itemset = pattern[-1]
        last_item = last_itemset[-1]
        jump = (last_item == last_itemset[0])
        # print(last_item)

        for sid, seq in zip(ids, sdb):
            pp_sdb, k = [], 0
            for itemset in seq:
                # print(itemset,seq)
                k += 1
                if itemset[0] == -1:
                    if jump:
                        index = -1
                    else:
                        index = self._index(last_item, itemset)
                else:
                    index = self._subset_index(last_itemset, itemset)
                if index > 0:
                    if index == len(itemset):
                        pp_sdb = seq[k:]
                    else:
                        pp_sdb = [[-1] + itemset[index:]] + seq[k:]
                    break
            if len(pp_sdb) != 0:
                res_ids.append(sid)
                res_sdb.append(pp_sdb)
        return res_ids, res_sdb

    def frequent_items(self, sdb, pattern):
        empty = pattern == []
        last_itemset = [] if empty else pattern[-1]
        seq_freqs, co_freqs = [0] * self.ncols, [0] * self.ncols
        for seq in sdb:

            if len(seq)==0: continue
            if seq[0][0] == -1:  # add all
                for item in seq[0][1:]:
                    co_freqs[item] += 1
                seq = seq[1:]

            elif not empty:  # add after last match (e.g., [a,c] and [a,b,c,d], add d)
                index = self._subset_index(last_itemset, seq[0])
                if index > 0:
                    for item in seq[0][index:]:
                        co_freqs[item] += 1
                    seq = seq[1:]

            visited = set()
            for itemset in seq:
                for item in itemset:
                    if item not in visited:
                        visited.add(item)
                        seq_freqs[item] += 1

        co_freqs = collections.OrderedDict({i: v for i, v in enumerate(co_freqs) if v >= self.min_rows})
        seq_freqs = collections.OrderedDict({i: v for i, v in enumerate(seq_freqs) if v >= self.min_rows})
        return co_freqs, seq_freqs

    def _set(self, seq):
        res = set()
        for itemset in seq:
            for item in itemset:
                res.add(item)
        return res

    def _index(self, item, large):
        for j in range(len(large)):
            if item == large[j]: return j + 1
        return -1

    def _subset_index(self, small, large):
        i, n = 0, len(small)
        for j in range(len(large)):
            if small[i] == large[j]:
                i += 1
                if i == n: return j + 1
            j += 1
        return -1


class SPMTests(unittest.TestCase):

    def test_spm(self):
        patterns = SPM(3, 1).run([[[1], [2]], [[0, 1], [2]], [[0, 1], [2]]], 3)
        print("First dataset", patterns)
        test_case = [[[16], [9, 18], [1, 6], [8, 23, 27], [0, 29], [19, 26], [22], [2, 24, 28]], [[23], [6, 21], [26], [16], [19, 22], [15, 17], [2, 13, 20, 28], [0, 1, 5], [18], [7, 9, 11], [25], [4, 10, 12, 24]], [[5], [2, 28], [11, 14, 18, 25], [4, 7], [27], [17, 26], [3], [6], [19], [12, 22, 29], [8, 10, 13, 15, 16, 20, 23], [21], [24]], [[2, 28], [5, 12, 18], [29], [19, 25], [7, 10], [4, 11, 15], [22, 26], [1, 16, 24], [3, 17], [8], [6, 14, 20], [21, 27], [23]], [[16, 19, 29], [0], [6, 21, 26, 27], [10, 23], [12, 14], [20]], [[0], [4, 10], [12, 28], [18], [14, 25], [5, 9, 11, 17, 23, 24, 27, 29], [7, 8, 13], [26], [16, 19, 20, 22], [3], [15], [6, 21]], [[28], [1], [2], [0, 29], [7, 10, 12], [18], [4, 9, 11, 25], [17], [19, 23], [3, 5, 6, 8, 13, 14, 15, 16, 20, 21, 22, 24, 26, 27]], [[9], [25], [2, 3, 13], [28], [0, 21], [8, 14, 27], [6, 20, 22], [29], [15, 19], [23, 24, 26], [16]], [[26], [6, 16, 23], [8, 27], [19, 29], [14], [20], [13, 15, 17], [21, 22, 24], [3], [18], [2, 7, 11], [28], [0, 1, 4, 5, 9, 10, 12, 25]], [[22, 23, 27], [3, 21], [13, 15, 16, 17, 24], [1, 4], [7, 9, 11], [0, 5, 12, 25], [10, 18], [2, 28]], [[8, 14, 19, 26, 27, 29], [3, 16, 20, 22], [15, 21], [13], [2, 4, 10, 12], [0, 28], [5, 7, 9, 25], [1, 11, 18]], [[0, 25], [7, 9], [1, 4, 5], [6, 13], [3, 18], [2, 8, 10, 15, 24, 27], [12, 20, 28], [21], [14, 19], [16, 22, 29], [26], [17, 23]], [[1], [0], [18], [28], [7, 10, 12, 29], [2, 9], [4, 25], [11], [23], [5], [3, 8, 15, 24, 27], [14, 17, 20], [6, 13, 16, 19, 21, 22, 26]], [[2, 4, 10, 11, 12], [1, 5, 9, 13, 17], [15, 25], [28], [0], [27], [3, 6], [8], [20], [14], [16, 22], [19], [23, 26]], [[28], [9, 12], [0, 10], [1, 2, 3, 5, 17, 25], [4, 18, 27], [7, 11, 22, 26], [24], [8], [13, 19], [6, 16], [15, 20, 21, 29], [14, 23]], [[20], [9, 13], [23, 25], [1, 5], [0, 24], [2], [4, 16], [10, 11, 12, 28], [7, 19, 21], [15], [3, 14, 26], [6, 8, 17, 18, 22], [27, 29]], [[3], [20, 22], [13], [4, 9, 25], [10], [12, 28], [1, 2, 5], [0], [7, 11, 18]], [[0, 25], [5, 9], [4, 12], [10, 20, 24], [26], [1], [15, 23], [16, 17, 19], [3, 6, 8, 14, 21], [27], [29]], [[14, 23, 24, 26, 27], [6, 8], [22], [3, 13], [29], [15, 21], [17], [11], [7, 9, 28], [5, 25], [2, 18], [1, 4, 10, 12], [0]], [[13], [2, 4, 7, 11, 20], [10], [12], [1, 8], [0, 3], [18, 19, 22, 23], [21], [14, 15, 17, 27, 29], [26], [6], [16], [24]], [[0, 1], [11], [4, 7, 9, 10, 12, 22, 25], [13, 29], [20, 23], [14, 19, 21, 24, 26], [3, 16], [5, 6, 8, 15, 17, 27]], [[12], [1, 7, 10, 13, 18, 19], [11, 20, 26], [0, 2, 8, 16], [6], [24], [15, 23], [3], [27], [14]], [[8], [24, 26, 27], [3, 6, 29], [20], [15, 17], [14, 19, 21], [18], [5], [13, 22], [7, 11], [0], [1], [2, 4, 9, 10, 12, 25, 28]], [[10, 15, 20], [12, 16], [22, 28], [3, 14, 21, 23], [24], [6, 8, 19], [29], [0, 26], [1], [27]], [[16], [17, 19], [21, 23, 27], [8], [13, 15], [14, 18], [5, 29], [7, 11], [12], [10], [3, 4, 25], [9], [0, 1, 2, 28]], [[11, 18], [15], [5, 20], [2, 3], [6, 13], [1, 8, 23], [16], [27], [0], [26], [24], [14, 17, 19], [22, 29]], [[4, 5], [1], [10, 13, 15], [12, 22, 25], [9], [16], [24], [19], [8, 20, 21, 27], [3, 14], [6, 17], [26], [23], [29]], [[3, 21], [6, 29], [16], [13, 14, 15, 17], [24], [18], [0, 1, 7], [10, 11, 12, 25, 28], [4, 5, 9], [2]], [[8, 14, 15, 19, 21, 22], [3, 24, 26, 29], [17], [13], [5], [2, 12, 28], [10, 18], [4], [1, 7, 9, 11, 25], [0]], [[0, 4, 20, 21], [17, 22, 24], [5, 6, 27], [1, 19], [16, 26], [2, 7], [8, 11, 23], [28, 29], [18]], [[29], [10, 12], [14], [11], [5, 18], [4, 7, 9], [27], [6, 25], [2, 28], [3], [17], [8, 15], [21], [22, 24, 26], [13, 16, 19, 20, 23]], [[2, 25], [7], [0, 9, 11], [16, 17, 18, 24], [1, 15, 20], [3], [6, 8, 28, 29], [14, 19, 26], [22, 23, 27], [13]], [[7, 25], [18, 28], [0, 4, 5], [9, 10, 12, 15, 19, 26], [3, 8, 20, 22, 24], [13], [14, 17, 27], [6, 23], [1, 16], [29]], [[1], [7, 11, 13], [22, 25], [4], [10, 12], [9], [17, 29], [19], [5, 15, 16, 20, 21, 27], [24, 26], [3, 6, 23], [8, 14]], [[6], [17], [20, 29], [21], [5], [24], [0, 2, 9, 13, 25], [1], [4, 10, 12, 18, 28], [11], [7]], [[6], [17], [20, 29], [21], [5], [24], [0, 2, 9, 13, 25], [1], [4, 10, 12, 18, 28], [11], [7]], [[24], [10], [12], [2, 21, 25], [28], [4, 9, 14], [1, 5, 7, 16], [11, 20, 23], [0, 27], [6, 13, 18], [3, 8, 26], [19], [15, 17], [22], [29]], [[28], [18], [2, 12], [7, 10, 11], [4, 27], [9, 25], [14], [24, 26], [23, 29], [5, 15, 17, 19], [3, 6, 21, 22], [8, 16, 20], [13]], [[2], [0], [7, 10, 28], [11, 12], [1, 3, 18], [4, 5, 25], [9], [14], [8, 17], [19, 23, 29], [13, 26], [16, 20, 22], [6, 15, 21, 24, 27]], [[23], [2, 11, 12], [10, 28], [7, 14], [0, 1, 4, 9, 18, 25], [29], [16], [5], [6, 17, 22], [8, 13, 27], [3, 15, 19, 20, 21, 24, 26]], [[2], [28], [4], [10], [6, 9, 11, 12], [7, 18, 25], [1], [0, 13, 23], [5, 21], [24, 29], [15, 17], [8, 14, 19, 20, 26, 27], [3, 16], [22]], [[5, 7, 18], [2, 4, 9, 11], [13, 14, 15], [10, 25, 28], [16, 20, 26], [6, 12, 19], [0, 1, 21, 22], [3, 24], [8, 23], [17, 27], [29]], [[7], [11], [23], [25], [4, 5, 18], [28], [9], [16], [0, 1, 2, 13], [22, 26], [6, 20], [21], [15], [17, 19], [3, 8, 14, 27, 29]], [[3], [19], [9, 29], [5, 22, 26], [2, 27], [14, 20, 25], [4, 28], [8, 11], [7], [10, 12, 17, 24], [16], [15, 18], [13, 21, 23], [6]], [[13], [17], [24], [29], [5], [21], [0, 1, 4, 9, 10, 25], [11, 12, 28], [2, 7], [18]], [[17, 24], [1], [4, 21, 29], [7, 11, 28], [2, 25], [0, 5, 9, 16, 18, 23], [19, 22], [26], [6, 8, 15, 20], [27], [3, 14]], [[9, 18], [7, 11, 14, 22], [8, 27], [6, 16, 19, 20, 26], [28], [23], [2]], [[17], [15, 21, 22, 27], [8, 23], [14], [3], [13], [10, 12, 18], [4, 7, 11, 28], [0, 2], [1, 5], [9, 25]], [[1], [12, 18], [10], [0, 2, 4, 7, 9, 11, 25, 26, 28], [5, 19, 21], [16, 23], [22, 27], [8, 20, 24], [3, 6, 15, 29], [13, 14], [17]], [[17], [8, 14, 15, 23], [16, 19, 24, 26], [3, 21, 22], [13, 20], [5], [1, 25], [4, 9], [0, 10, 12], [2, 7, 11, 28], [18]]]
        '''test_case = [[[0], [0, 1, 2], [0, 2], [3], [2, 5]],
                     [[0, 3], [2], [1, 2], [0, 4]],
                     [[2, 5], [0, 1], [3, 5], [2, 1]],
                     [[4, 6], [0, 5], [2], [1], [1]]]'''
        patterns = SPM(20, 1).run(test_case, 30)
        print("Second dataset", patterns)


if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(unittest.TestLoader().loadTestsFromTestCase(SPMTests))